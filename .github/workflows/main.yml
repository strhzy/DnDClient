name: Build and Release MAUI App with Free Code-Signing Certificate

on:
  push:
    branches:
      - master

jobs:
  build-android:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install Android workloads
      run: dotnet workload restore

    - name: Build APK
      run: |
        dotnet publish -f net8.0-android -c Release -r android-arm64 -p:AndroidApplicationType=Apk /p:PublishReadyToRun=false DnDClient.csproj --self-contained true -o ./publish/android

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: maui-apk
        path: ./publish/android/*.apk

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install Windows workloads
      run: dotnet workload restore

    - name: Request Free Code-Signing Certificate from Actalis
      run: |
        # Запрос бесплатного сертификата через Actalis
        $email = "your-email@example.com"  # Укажите ваш email
        $csrFile = "$env:GITHUB_WORKSPACE\request.csr"
        $keyFile = "$env:GITHUB_WORKSPACE\private.key"

        # Создаем закрытый ключ и CSR
        openssl req -new -newkey rsa:2048 -nodes -keyout $keyFile -out $csrFile -subj "/C=US/ST=State/L=City/O=YourCompany/CN=YourCompany"

        # Отправляем CSR в Actalis
        Invoke-WebRequest -Uri "https://www.actalis.com/free-code-signing-certificate" -Method POST -Body @{
          email = $email
          csr = Get-Content $csrFile -Raw
        } -ContentType "application/x-www-form-urlencoded"

        # После одобрения Actalis вышлет сертификат на указанный email
        # Скачайте файл сертификата и добавьте его в GitHub Secrets как BASE64_CERTIFICATE

    - name: Import Code-Signing Certificate
      run: |
        # Импортируем сертификат из GitHub Secrets
        $certPassword = "password123" | ConvertTo-SecureString -Force -AsPlainText
        $certBase64 = "${{ secrets.BASE64_CERTIFICATE }}"
        $certPath = "$env:GITHUB_WORKSPACE\MyCert.pfx"

        # Декодируем BASE64 в PFX-файл
        [System.Convert]::FromBase64String($certBase64) | Set-Content -Path $certPath -Encoding Byte

        # Импортируем сертификат в хранилище
        Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\LocalMachine\My -Password $certPassword

    - name: Build MSI/MSIX
      run: |
        dotnet publish -f net8.0-windows10.0.19041.0 -c Release DnDClient.csproj --self-contained true -o ./publish/windows /p:AppxPackage=true /p:AppxBundle=Always /p:AppxPackageDir=.

    - name: Sign the MSIX package
      run: |
        signtool sign /fd SHA256 /a /tr http://timestamp.digicert.com /td SHA256 /v /f MyCert.pfx /p password123 ./publish/windows/*.msix

    - name: Move and rename MSIX
      run: |
        if (Test-Path "D:\a\DnDClient\DnDClient\.DnDClient_1.0.0.1_Test/*.msix") { Move-Item "D:\a\DnDClient\DnDClient\.DnDClient_1.0.0.1_Test/*.msix" "./publish/windows/DnDClient.msi" }
        if (Test-Path "D:\a\DnDClient\DnDClient\.DnDClient_1.0.0.1_Test/*.msixbundle") { Move-Item "D:\a\DnDClient\DnDClient\.DnDClient_1.0.0.1_Test/*.msixbundle" "./publish/windows/DnDClient.msixbundle" }
        if (Test-Path "D:\a\DnDClient\DnDClient\.DnDClient_1.0.0.1_Test/*.msi") { Move-Item "D:\a\DnDClient\DnDClient\.DnDClient_1.0.0.1_Test/*.msi" "./publish/windows/DnDClient.msi" }

    - name: Upload MSI/MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: maui-msi
        path: |
          ./publish/windows/*.msi
          ./publish/windows/*.msix
          ./publish/windows/*.msixbundle

  create-release:
    runs-on: ubuntu-latest
    needs: [build-android, build-windows]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: maui-apk
        path: ./artifacts/

    - name: Download MSI
      uses: actions/download-artifact@v4
      with:
        name: maui-msi
        path: ./artifacts/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./artifacts/*.apk
          ./artifacts/*.msi
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Новые фичи
          - Автоматическая сборка MAUI приложения.
          
          ## Артефакты
          - APK для Android
          - MSI для Windows
          
          Собрано на GitHub Actions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}